generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cart          Cart?
  orders        Order[]
  refreshTokens RefreshToken[]
  userAddresses UserAddress[]
  userRoles     UserRole[]

  @@index([email])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id           Int                  @id @default(autoincrement())
  slug         String               @unique
  name         String
  description  String
  imageUrl     String
  weight       Float?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  categoryId   Int?
  brandId      Int?
  smallStrip   String?
  brand        Brand?               @relation(fields: [brandId], references: [id])
  category     Category?            @relation(fields: [categoryId], references: [id])
  ProductImage ProductImage[]
  infoSections ProductInfoSection[]
  variants     ProductVariant[]
  discounts    Discount[]           @relation("DiscountToProduct")
  collections  Collection[]         @relation("ProductToCollection")
  colors       Color[]              @relation("ProductToColor")
  sizes        Size[]               @relation("ProductToSize")

  @@index([categoryId])
  @@index([brandId])
  @@index([createdAt])
  @@index([isActive])
}

model ProductInfoSection {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  productId Int
  sortOrder Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id              Int             @id @default(autoincrement())
  sku             String          @unique
  price           Float
  stock           Int
  isActive        Boolean         @default(true)
  productId       Int
  colorId         Int?
  sizeId          Int?
  costPrice       Float?
  discountPercent Float?
  originalPrice   Float?
  profit          Float?
  profitMargin    Float?
  cartItems       CartItem[]
  orderItems      OrderItem[]
  color           Color?          @relation(fields: [colorId], references: [id])
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  size            Size?           @relation(fields: [sizeId], references: [id])
  stockMovements  StockMovement[]

  @@index([productId])
  @@index([colorId, sizeId])
  @@index([sku])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id               Int            @id @default(autoincrement())
  quantity         Int
  price            Float
  cartId           Int
  productVariantId Int
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  @@unique([cartId, productVariantId])
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  quantity         Int
  price            Float
  orderId          Int
  productVariantId Int
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  isActive Boolean   @default(true)
  products Product[]
}

model Collection {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[] @relation("CategoryInCollection")
  products   Product[]  @relation("ProductToCollection")
}

model Category {
  id          Int          @id @default(autoincrement())
  slug        String       @unique
  name        String       @unique
  isActive    Boolean      @default(true)
  products    Product[]
  collections Collection[] @relation("CategoryInCollection")
}

model Color {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  hexCode         String?
  productVariants ProductVariant[]
  products        Product[]        @relation("ProductToColor")
}

model Size {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  productVariants ProductVariant[]
  products        Product[]        @relation("ProductToSize")
}

model Discount {
  id           Int          @id @default(autoincrement())
  code         String       @unique
  description  String?
  discountType DiscountType
  value        Float
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean      @default(true)
  maxUses      Int?
  currentUses  Int          @default(0)
  orders       Order[]
  products     Product[]    @relation("DiscountToProduct")

  @@index([code])
  @@index([isActive, startDate, endDate])
}

model Order {
  id               Int             @id @default(autoincrement())
  orderNumber      String          @unique @default(cuid())
  status           OrderStatus     @default(PENDING)
  shippingAddress  String?
  phoneNumber      String?
  customerName     String?
  totalPrice       Float
  shippingFee      Float           @default(0)
  discountAmount   Float           @default(0)
  discountId       Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           Int
  shippingMethodId Int?
  discount         Discount?       @relation(fields: [discountId], references: [id])
  shippingMethod   ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  orderItems       OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([orderNumber])
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  userId     Int
  fullName   String
  phone      String
  address    String
  city       String
  country    String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  imageUrl  String
  altText   String?
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ShippingMethod {
  id                    Int     @id @default(autoincrement())
  name                  String  @unique
  description           String?
  fee                   Float
  estimatedDeliveryDays Int
  isActive              Boolean @default(true)
  orders                Order[]
}

model Warehouse {
  id             Int             @id @default(autoincrement())
  name           String
  location       String
  stockMovements StockMovement[]
}

model StockMovement {
  id               Int            @id @default(autoincrement())
  productVariantId Int
  warehouseId      Int
  quantity         Int
  type             MovementType
  createdAt        DateTime       @default(now())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  warehouse        Warehouse      @relation(fields: [warehouseId], references: [id])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  priority    Int
  isActive    Boolean          @default(true)
  metadata    Json?
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  resource    String
  action      String
  category    String
  roles       RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model MediaFolder {
  id Int @id @default(autoincrement())
  name String
  slug String @unique
  parentId Int?   // hỗ trợ nếu muốn tạo ra folder con
  parent    MediaFolder? @relation("FolderParent", fields: [parentId], references: [id])
  children  MediaFolder[] @relation("FolderParent")
  medias Media[]
  createAt DateTime @default(now())
}

model Media {
  id Int @id @default(autoincrement())
  url String
  altText String?
  type MediaType
  folderId Int?
  folder MediaFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  createAt DateTime @default(now())
  updateBy Int?
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum MovementType {
  IN
  OUT
}
