
generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========= onDelete: Cascade =================//
// Khi b·∫£n ghi cha b·ªã x√≥a, th√¨ t·ª± ƒë·ªông x√≥a t·∫•t c·∫£ b·∫£n ghi con li√™n quan.
// user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//  userId: l√† foreign key
//  references: [id]: tr·ªè ƒë·∫øn User.id
//  onDelete: Cascade: n·∫øu User b·ªã x√≥a ‚Üí Prisma s·∫Ω t·ª± x√≥a t·∫•t c·∫£ b·∫£n ghi c√≥ userId t∆∞∆°ng ·ª©ng
// ===============@id: ƒë·ªãnh nghƒ©a l√† kh√≥a ch√≠nh. ===================//
// @default(autoincrement()): m·ªói khi t·∫°o b·∫£n ghi m·ªõi, Prisma t·ª± tƒÉng gi√° tr·ªã id l√™n 1.
// ========== C√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh th∆∞·ªùng g·∫∑p: ========== //
// autoincr@default(autoincrement()) 	T·ª± ƒë·ªông tƒÉng s·ªë nguy√™n
// @default(now())  	L·∫•y th·ªùi gian hi·ªán t·∫°i (DateTime)
// @default(cuid())  Chu·ªói ID duy nh·∫•t, ng·∫Øn h∆°n uuid
// @default(uuid())  UUID ng·∫´u nhi√™n
// @default(true/false)   D√πng v·ªõi boolean
// ============ @unique T∆∞∆°ng ƒë∆∞∆°ng v·ªõi UNIQUE trong SQL: ƒë·∫£m b·∫£o gi√° tr·ªã kh√¥ng tr√πng l·∫∑p. V√≠ d·ª•: email String @unique  ===================//
// ======= @relation(...) ======= //
// D√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a m·ªëi quan h·ªá gi·ªØa c√°c b·∫£ng (1-1, 1-nhi·ªÅu, nhi·ªÅu-nhi·ªÅu). V√≠ d·ª•:
// user User @relation(fields: [userId], references: [id]) ===> üîç Nghƒ©a l√† userId l√† kh√≥a ngo·∫°i (foreign key) li√™n k·∫øt t·ªõi User.id.
// =======  @relation("ProductToSize") ============= //
//  "ProductToSize" l√† t√™n t·ª± ƒë·∫∑t cho m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu (many-to-many) gi·ªØa Product v√† Size. N√≥ d√πng ƒë·ªÉ g√°n t√™n r√µ r√†ng cho quan h·ªá, gi√∫p Prisma bi·∫øt chi·ªÅu n√†o v·ªõi chi·ªÅu n√†o trong quan h·ªá.
// B·∫°n c√≥ th·ªÉ kh√¥ng c·∫ßn t·ª± t·∫°o b·∫£ng trung gian th·ªß c√¥ng, Prisma s·∫Ω t·ª± sinh n·∫øu b·∫°n d√πng:  sizes Size[] @relation("ProductToSize") products Product[] @relation("ProductToSize")

// model Product {
//   id    Int     @id @default(autoincrement())
//   name  String
//   sizes Size[]  @relation("ProductToSize")
// }
// model Size {
//   id       Int       @id @default(autoincrement())
//   name     String
//   products Product[] @relation("ProductToSize")
// }
//  ==== Prisma s·∫Ω ng·∫ßm t·∫°o ra m·ªôt b·∫£ng trung gian ====
// ProductToSize (
//   productId INT,
//   sizeId INT,
//   PRIMARY KEY (productId, sizeId),
//   FOREIGN KEY (productId) REFERENCES Product(id),
//   FOREIGN KEY (sizeId) REFERENCES Size(id)
// )

// ========== @@unique([field1, field2]) ============//
// T·∫°o unique index nhi·ªÅu c·ªôt (composite unique key)  ===> vd: @@unique([cartId, productVariantId])
// ======= @updatedAt ======= //
// D√πng cho ki·ªÉu DateTime, Prisma s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t th·ªùi gian m·ªõi nh·∫•t m·ªói khi record thay ƒë·ªïi:  updatedAt DateTime @updatedAt
// ======= Enum ============== //
// Khai b√°o t·∫≠p gi√° tr·ªã r√†ng bu·ªôc, nh∆∞ OrderStatus:
// enum OrderStatus {
//   PENDING
//   CONFIRMED
//   ...
// }

// Ki·ªÉu d·ªØ li·ªáu Prisma
//  Prisma  ====  SQL t∆∞∆°ng ·ª©ng  ===   √ù nghƒ©a
//    Int           INTEGER              	S·ªë nguy√™n
//    String      	VARCHAR/TEXT        	Chu·ªói
//   Boolean	      BOOLEAN	              ƒê√∫ng/Sai
//   DateTime	      TIMESTAMP	            Ng√†y gi·ªù
//   Float        	FLOAT/DOUBLE	        S·ªë th·ª±c
//  Json	          JSON	                D·ªØ li·ªáu d·∫°ng

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orders        Order[]
  refreshTokens RefreshToken[]
  cart          Cart?
  userRoles     UserRole[]
  userAddresses UserAddress[]

  @@index([email])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}
// ====== product ====== //
model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  weight      Float?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categoryId  Int?
  category    Category?        @relation(fields: [categoryId], references: [id])
  brandId     Int?
  brand       Brand?           @relation(fields: [brandId], references: [id])
  variants    ProductVariant[]
  discounts   Discount[]
  sizes       Size[]           @relation("ProductToSize")
  colors      Color[]          @relation("ProductToColor")
  ProductImage ProductImage[]

  @@index([categoryId])
  @@index([brandId])
  @@index([createdAt])
  @@index([isActive])
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  sku        String      @unique
  price      Float
  stock      Int
  isActive   Boolean     @default(true)
  productId  Int
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId    Int?
  color      Color?      @relation(fields: [colorId], references: [id])
  sizeId     Int?
  size       Size?       @relation(fields: [sizeId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  stockMovements StockMovement[]

  @@index([productId])
  @@index([colorId, sizeId])
  @@index([sku])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}


model CartItem {
  id               Int            @id @default(autoincrement())
  quantity         Int
  price            Float
  cartId           Int
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  @@unique([cartId, productVariantId])
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  quantity         Int
  price            Float
  orderId          Int
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}


model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  isActive Boolean   @default(true)
  products Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  isActive Boolean   @default(true)
  products Product[]
}

model Color {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  hexCode         String?
  products        Product[]        @relation("ProductToColor")
  productVariants ProductVariant[]
}

model Size {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  products        Product[]        @relation("ProductToSize")
  productVariants ProductVariant[]
}

model Discount {
  id           Int          @id @default(autoincrement())
  code         String       @unique
  description  String?
  discountType DiscountType
  value        Float
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean      @default(true)
  maxUses      Int?
  currentUses  Int          @default(0)
  products     Product[]
  orders       Order[]

  @@index([code])
  @@index([isActive, startDate, endDate])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique @default(cuid())
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  phoneNumber     String?
  customerName    String?
  totalPrice      Float
  shippingFee     Float       @default(0)
  discountAmount  Float       @default(0)
  discountId      Int?
  discount        Discount?   @relation(fields: [discountId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  shippingMethodId  Int?
  shippingMethod    ShippingMethod? @relation(fields: [shippingMethodId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([orderNumber])
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName   String
  phone      String
  address    String
  city       String
  country    String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  productId  Int
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl   String
  altText    String?
  isMain     Boolean @default(false)
}

model ShippingMethod {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  description String?
  fee        Float
  estimatedDeliveryDays Int
  isActive   Boolean  @default(true)
  orders     Order[]
}

model Warehouse {
  id      Int     @id @default(autoincrement())
  name    String
  location String
  stockMovements StockMovement[]
}

model StockMovement {
  id              Int             @id @default(autoincrement())
  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  warehouseId     Int
  warehouse       Warehouse       @relation(fields: [warehouseId], references: [id])
  quantity        Int
  type            MovementType    // IN or OUT
  createdAt       DateTime        @default(now())
}

enum MovementType {
  IN
  OUT
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  priority    Int
  isActive    Boolean       @default(true)
  metadata    Json?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  resource    String
  action      String
  category    String
  roles       RolePermission[]
}

model RolePermission {
  id            Int         @id @default(autoincrement())
  roleId        Int
  permissionId  Int
  role          Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserRole {
  id      Int   @id @default(autoincrement())
  userId  Int
  roleId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}
